/*
    styles.scss

    import all styles into here and generate a single stylesheet for everything.
*/
/*
    block-content mixin

    If we have an element that we need to take up a container, e.g. images,
    we cna use this to absolutely position it inside the parent.
    We can also define if it's a pseudoelement too to ensure that we can
    use this mixin for those too, instead of having to repeat ourselves too often.

    @param $pseudo: if the element is a pseudo-element or not. If it is, ensure we
        render out an empty `content` element.
*/
/*
    Colours
    Coolors Exported Palette - coolors.co/0d1b2a-e8e8e8-93a3b1-119da4-b3094b
*/
/*
    Brand colours

    Colours specific to the brands and icons we're referencing.

    Keeps the main colours stylesheet out of trouble.
*/
/*
    Font defaults

    Looking for font sizes? They're in 00-vars/_sizes.scss.
*/
/*
    Transitions

    Keeping transitional effects consistent sitewide by keeping the
    default styles here.
*/
/*
    Sizing
*/
/*
    Breakpoints

    A list of useful breakpoints for media queries and suchlike.
*/
/*
    Normalise

    1. Adjusts the box-sizing as per https://css-tricks.com/inheriting-box-sizing-probably-slightly-better-best-practice/.
    2. Prevent adjustments of font size after orientation changes in iOS. From http://necolas.github.io/normalize.css/.

*/
html {
  box-sizing: border-box;
  font-size: 100%;
  -webkit-text-size-adjust: 100%; }

*,
*::before,
*::after {
  box-sizing: inherit; }

body {
  margin: 0;
  display: flex;
  flex-wrap: wrap;
  min-height: 100vh; }
  body > * {
    align-self: flex-start; }

body {
  font-family: "Lato", sans-serif;
  background-color: #f7f7f7;
  color: #0d1b2a; }

a {
  color: #119da4; }
  a:hover, a:focus, a:active {
    color: #0c7176; }

p {
  margin: 0.5rem; }

h1,
h2,
h3 {
  font-weight: 600; }

/*
    Buttons

    Base styling for buttons

    Notes:
    1. Adds a nice smooth transition effect for all the colours affected on every button.
    2. Also keeps <button /> and <a class="button" /> styles consistent by displaying them
        the same.
    3. Makes sure it's obvious that the buttons can be clicked on and keep
        real <button /> elements and <a class="button" /> links consistent.
    4. Each button has it's own border colours but the styles are otherwise consistent
*/
.button {
  transition: background-color 0.2s ease-out, border 0.2s ease-out, color 0.2s ease-out;
  text-decoration: none;
  cursor: pointer;
  font-size: 1rem;
  padding: 0.5rem;
  border-width: 1px;
  border-style: solid;
  border-radius: 0.25rem;
  display: inline-block; }

.button--primary {
  background-color: #119da4;
  color: #f7f7f7;
  border-color: #119da4; }
  .button--primary:hover, .button--primary:focus, .button--primary:active {
    background-color: #0c7176;
    color: #f7f7f7;
    border-color: #0c7176; }

.button--secondary {
  background-color: transparent;
  color: #b3094b;
  border-color: #b3094b; }
  .button--secondary:hover, .button--secondary:focus, .button--secondary:active {
    background-color: #b3094b;
    color: #f7f7f7; }

img {
  max-width: 100%;
  height: auto; }

.icon {
  width: 32px;
  height: 32px;
  fill: rgba(13, 27, 42, 0.75);
  transition: fill 0.2s ease-out; }

.icon--missguided {
  width: 100px;
  height: 23px; }

.icon--ladbiblegroup {
  width: 70px;
  height: 70px; }
  .icon--ladbiblegroup:hover .st1 {
    fill: #EB4136; }

.icon--linkedin:hover {
  fill: #0077B5; }

.icon--github:hover {
  fill: #000000; }

.icon--twitter:hover {
  fill: #1DA1F2; }

.icon--email:hover {
  fill: rebeccapurple; }

/*
    Horizontal list styles
*/
.h-list {
  display: flex;
  margin: 0;
  padding: 0;
  list-style-type: none; }

/*
    Container styles

    We may want to style a container but any direct child element needs to sit centrally
    so we use this to ensure only the child has the auto-margins on either side
    and fits to a max-width. Means we have - theoretically - fewer wrappers to contend with.
*/
.container {
  width: 100vw;
  align-self: flex-start; }
  .container > * {
    margin: 0 auto;
    max-width: 1280px;
    padding: 1rem; }
    @media only screen and (min-width: 1280px) {
      .container > * {
        padding-right: 0;
        padding-left: 0; } }

/*
    Navigation

    Default navigation styles

    1. Display: block applied as links are usually inline, so any padding/margin applied
        makes it sit weird.
*/
.nav .h-list__item a {
  display: block;
  padding-top: 1rem;
  padding-right: 1rem;
  padding-bottom: 0.75rem;
  padding-left: 1rem;
  border-bottom: 0.25rem solid transparent;
  color: #0d1b2a;
  text-decoration: none;
  font-weight: 700; }
  .nav .h-list__item a:hover, .nav .h-list__item a:focus, .nav .h-list__item a:active, .nav .h-list__item a:target {
    color: #119da4;
    border-color: #119da4; }

.footer {
  align-self: flex-end;
  margin-top: 2rem;
  width: 100vw;
  background-color: #e8e8e8;
  text-align: center;
  font-size: 0.8rem;
  color: #93a3b1; }

.section--social {
  justify-content: space-around; }

.header {
  display: flex;
  justify-content: space-between;
  align-items: flex-end;
  flex: 0 0 auto;
  margin-bottom: 2rem;
  width: 100vw;
  background-color: #f7f7f7;
  box-shadow: 0 0.25rem 3px rgba(147, 163, 177, 0.4); }
  .header .logo {
    width: 50px;
    height: 30px;
    background-color: #93a3b1;
    margin: 1rem; }

/*
    Overrides

    Sometimes we want to override something else that's happening, e.g. hiding elements or making
    them only visible on certain viewports.
*/
.no-display {
  display: none; }
